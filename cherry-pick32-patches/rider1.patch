From 33af53c1a6b944924981575c016528b6a5b431aa Mon Sep 17 00:00:00 2001
From: Ivan Shakhov <Ivan.Shakhov@jetbrains.com>
Date: Thu, 27 Feb 2020 15:22:12 +0100
Subject: [PATCH] Support toolbox custom "Tools install location", by reading
 .settings.json

---
 .../GodotTools/Ides/Rider/RiderPathLocator.cs | 78 ++++++++++++++-----
 1 file changed, 60 insertions(+), 18 deletions(-)

diff --git a/modules/mono/editor/GodotTools/GodotTools/Ides/Rider/RiderPathLocator.cs b/modules/mono/editor/GodotTools/GodotTools/Ides/Rider/RiderPathLocator.cs
index 9038333d389..5965e0fbcfa 100644
--- a/modules/mono/editor/GodotTools/GodotTools/Ides/Rider/RiderPathLocator.cs
+++ b/modules/mono/editor/GodotTools/GodotTools/Ides/Rider/RiderPathLocator.cs
@@ -11,6 +11,10 @@
 using File = System.IO.File;
 using Path = System.IO.Path;
 using OS = GodotTools.Utils.OS;
+// ReSharper disable UnassignedField.Local
+// ReSharper disable InconsistentNaming
+// ReSharper disable UnassignedField.Global
+// ReSharper disable MemberHidesStaticFromOuterClass
 
 namespace GodotTools.Ides.Rider
 {
@@ -131,28 +135,45 @@ private static string GetToolboxBaseDir()
             if (OS.IsWindows)
             {
                 var localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
-                return Path.Combine(localAppData, @"JetBrains\Toolbox\apps\Rider");
+                return GetToolboxRiderRootPath(localAppData);
             }
 
             if (OS.IsOSX)
             {
                 var home = Environment.GetEnvironmentVariable("HOME");
-                if (!string.IsNullOrEmpty(home))
-                {
-                    return Path.Combine(home, @"Library/Application Support/JetBrains/Toolbox/apps/Rider");
-                }
+                if (string.IsNullOrEmpty(home)) 
+                    return string.Empty;
+                var localAppData = Path.Combine(home, @"Library/Application Support");
+                return GetToolboxRiderRootPath(localAppData);
             }
 
             if (OS.IsUnixLike())
             {
                 var home = Environment.GetEnvironmentVariable("HOME");
-                if (!string.IsNullOrEmpty(home))
-                {
-                    return Path.Combine(home, @".local/share/JetBrains/Toolbox/apps/Rider");
-                }
+                if (string.IsNullOrEmpty(home)) 
+                    return string.Empty;
+                var localAppData = Path.Combine(home, @".local/share");
+                return GetToolboxRiderRootPath(localAppData);
+            }
+
+            return string.Empty;
+        }
+
+
+        private static string GetToolboxRiderRootPath(string localAppData)
+        {
+            var toolboxPath = Path.Combine(localAppData, @"JetBrains\Toolbox");
+            var settingsJson = Path.Combine(toolboxPath, ".settings.json");
+
+            if (File.Exists(settingsJson))
+            {
+                var path = SettingsJson.GetInstallLocationFromJson(File.ReadAllText(settingsJson));
+                if (!string.IsNullOrEmpty(path))
+                    toolboxPath = path;
             }
 
-            throw new Exception("Unexpected OS.");
+            var toolboxRiderRootPath = Path.Combine(toolboxPath, @"apps\Rider");
+            return toolboxRiderRootPath;
         }
 
         internal static ProductInfo GetBuildVersion(string path)
@@ -226,8 +247,8 @@ private static void CollectPathsFromRegistry(string registryKey, List<string> in
               {
                   try
                   {
-                // use history.json - last entry stands for the active build https://jetbrains.slack.com/archives/C07KNP99D/p1547807024066500?thread_ts=1547731708.057700&cid=C07KNP99D
-                var historyFile = Path.Combine(channelDir, ".history.json");
+                      // use history.json - last entry stands for the active build https://jetbrains.slack.com/archives/C07KNP99D/p1547807024066500?thread_ts=1547731708.057700&cid=C07KNP99D
+                      var historyFile = Path.Combine(channelDir, ".history.json");
                       if (File.Exists(historyFile))
                       {
                           var json = File.ReadAllText(historyFile);
@@ -255,14 +276,14 @@ private static void CollectPathsFromRegistry(string registryKey, List<string> in
                           }
                       }
 
-                // changes in toolbox json files format may brake the logic above, so return all found Rider installations
-                return Directory.GetDirectories(channelDir)
-                  .SelectMany(buildDir => GetExecutablePaths(dirName, searchPattern, isMac, buildDir));
+                      // changes in toolbox json files format may brake the logic above, so return all found Rider installations
+                      return Directory.GetDirectories(channelDir)
+                          .SelectMany(buildDir => GetExecutablePaths(dirName, searchPattern, isMac, buildDir));
                   }
                   catch (Exception e)
                   {
-                // do not write to Debug.Log, just log it.
-                Logger.Warn($"Failed to get RiderPath from {channelDir}", e);
+                      // do not write to Debug.Log, just log it.
+                      Logger.Warn($"Failed to get RiderPath from {channelDir}", e);
                   }
 
                   return new string[0];
@@ -288,6 +309,27 @@ private static string[] GetExecutablePaths(string dirName, string searchPattern,
         // Note that Unity disable this warning in the generated C# projects
 #pragma warning disable 0649
 
+        [Serializable]
+        class SettingsJson
+        {
+            public string install_location;
+      
+            [CanBeNull]
+            public static string GetInstallLocationFromJson(string json)
+            {
+                try
+                {
+                    return JsonConvert.DeserializeObject<SettingsJson>(json).install_location;
+                }
+                catch (Exception)
+                {
+                    Logger.Warn($"Failed to get install_location from json {json}");
+                }
+
+                return null;
+            }
+        }
+
         [Serializable]
         class ToolboxHistory
         {
@@ -372,7 +414,6 @@ public static string GetLatestBuildFromJson(string json)
         [Serializable]
         class ActiveApplication
         {
-            // ReSharper disable once InconsistentNaming
             public List<string> builds;
         }
 
@@ -380,6 +421,7 @@ class ActiveApplication
 
         public struct RiderInfo
         {
+            // ReSharper disable once NotAccessedField.Global
             public bool IsToolbox;
             public string Presentation;
             public Version BuildNumber;

